<html>
<head>
    <title>Drive API Quickstart</title>
    <meta charset='utf-8' />
</head>
<body>
<p>Drive API Quickstart</p>

<!--Add buttons to initiate auth sequence and sign out-->
<button id="authorize-button" style="display: none;">Authorize</button>
<button id="signout-button" style="display: none;">Sign Out</button>
    
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<body>
<h2>Song Info</h2>
<div id="length">Duration:</div>
<div id="source">Source:</div>
<div id="status" style="color:red;">Status: Loading</div>
<hr>
<h2>Cloud Player</h2>
<button id="play">Play</button>
<button id="pause">Pause</button>
<button id="restart">Restart</button>
<hr>
<h2>Current Track</h2>
<div id="currentTime">0</div>
</body>

<pre id="content"></pre>
    
<select id="songlist" multiple="multiple"></select>

<div id="selectedSongs"></div>

<style>
    #play, #pause, #restart {
        width: 200px;
        height: 120px;
        font-size: 30px;
    }

    select[multiple], select[size] {
        height: 800px;
        width: auto;
    }

    input, select, textarea {
        max-width: 1200px;
    }
</style>

<script type="text/javascript">
    // Client ID and API key from the Developer Console
    var CLIENT_ID = '1088703784481-01eu5v2v6q7v7mb2gff3g7hd455a0fqe.apps.googleusercontent.com';
    var API_KEY = 'AIzaSyC804CI9ckD-hjtFHfSNdMGWasvL9I1oEs';

    // Array of API discovery doc URLs for APIs used by the quickstart
    var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"];

    // Authorization scopes required by the API; multiple scopes can be
    // included, separated by spaces.
    var SCOPES = 'https://www.googleapis.com/auth/drive.metadata.readonly';

    var authorizeButton = document.getElementById('authorize-button');
    var signoutButton = document.getElementById('signout-button');

    /**
     *  On load, called to load the auth2 library and API client library.
     */
    function handleClientLoad() {
        gapi.load('client:auth2', initClient);
    }

    /**
     *  Initializes the API client library and sets up sign-in state
     *  listeners.
     */
    function initClient() {
        gapi.client.init({
            apiKey: API_KEY,
            clientId: CLIENT_ID,
            discoveryDocs: DISCOVERY_DOCS,
            scope: SCOPES
        }).then(function () {
            // Listen for sign-in state changes.
            gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

            // Handle the initial sign-in state.
            updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
            authorizeButton.onclick = handleAuthClick;
            signoutButton.onclick = handleSignoutClick;
        });
    }

    /**
     *  Called when the signed in status changes, to update the UI
     *  appropriately. After a sign-in, the API is called.
     */
    function updateSigninStatus(isSignedIn) {
        if (isSignedIn) {
            authorizeButton.style.display = 'none';
            signoutButton.style.display = 'block';
            listFiles();
        } else {
            authorizeButton.style.display = 'block';
            signoutButton.style.display = 'none';
        }
    }

    /**
     *  Sign in the user upon button click.
     */
    function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
    }

    /**
     *  Sign out the user upon button click.
     */
    function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
    }

    /**
     * Append a pre element to the body containing the given message
     * as its text node. Used to display the results of the API call.
     *
     * param {string} message Text to be placed in pre element.
     */
    function appendPre(message) {
        var pre = document.getElementById('content');
        var textContent = document.createTextNode(message + '\n');
        pre.appendChild(textContent);
    }

    /**
     * Print files.
     */
    function listFiles() {
        gapi.client.drive.files.list({
            'pageSize': 10,
            'fields': "nextPageToken, files(id, name)"
        }).then(function(response) {
            appendPre('Files:');
            var files = response.result.files;
            if (files && files.length > 0) {
                for (var i = 0; i < files.length; i++) {
                    var file = files[i];
                    appendPre(file.name + ' (' + file.id + ')');
                }
            } else {
                appendPre('No files found.');
            }
        });
    }

    /*play functionality*/
    $(document).ready(function () {
        var audioElement = document.createElement('audio');
        audioElement.setAttribute('src', 'http://www.soundjay.com/misc/sounds/bell-ringing-01.mp3');

        audioElement.addEventListener('ended', function () {
            this.play();
        }, false);

        audioElement.addEventListener("canplay", function () {
            $("#length").text("Duration:" + audioElement.duration + " seconds");
            $("#source").text("Source:" + audioElement.src);
            $("#status").text("Status: Ready to play").css("color", "green");
        });

        audioElement.addEventListener("timeupdate", function () {
            $("#currentTime").text("Current second:" + audioElement.currentTime);
        });

        $('#play').click(function () {
            audioElement.play();
            $("#status").text("Status: Playing");
        });

        $('#pause').click(function () {
            audioElement.pause();
            $("#status").text("Status: Paused");
        });

        $('#restart').click(function () {
            audioElement.currentTime = 0;
        });
    });


    $("#songlist").on({
        click: function () { alert($("#songlist option:selected").text()) }
        //mouseout: function () { alert("test2") }
    });


</script>

<script async defer src="https://apis.google.com/js/api.js"
        onload="this.onload=function(){};handleClientLoad()"
        onreadystatechange="if (this.readyState === 'complete') this.onload()">
</script>
</body>
</html>